
==================== FINAL INTERFACE ====================
2016-09-08 20:38:39.498007 UTC

interface main@main:Main 7103
  interface hash: 823a28bdba42a1486d550e86b3292efe
  ABI hash: 13f5390bf2907730a32bc1c225bb18b8
  export-list hash: 7632c9e420e274147d365b17ec1911dc
  orphan hash: 6ced55afa35c4c9c1a85bfc557b8b801
  flag hash: 42b4c1a3a296a7e1e51cea8aac284b5b
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.assign
  Main.dist
  Main.kmeans
  Main.main
  Main.relocate
  Main.Point
module dependencies:
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:Data.Ord 66127262fc269c8a61d7d87ba94bd4d2
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Float e532d434ec2447d809887c0fca1d78a5
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 0899686bfc1d9ef72dff3de85e99862a
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map bf7758bd12b23a367777a33fd16e39de
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base c921f79770a215e3f4c72c747cb6a28a
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
ce4d14e32b18e174d265c55ea8b5289f
  $s$fEq[] :: GHC.Classes.Eq [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Types.Double]
                  (GHC.Classes.$fEq[]_$c== @ GHC.Types.Double GHC.Classes.$fEqDouble)
                  Main.$s$fEq[]_$s$fEq[]_$c/= -}
b849ffd13d499c92b568ab85d4166845
  $s$fEq[]_$s$fEq[]_$c/= ::
    [GHC.Types.Double] -> [GHC.Types.Double] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ x :: [GHC.Types.Double] y :: [GHC.Types.Double] ->
                 GHC.Classes.not
                   (GHC.Classes.$fEq[]_$c==
                      @ GHC.Types.Double
                      GHC.Classes.$fEqDouble
                      x
                      y)) -}
4fcd98657ad10210c76b041eeca8a5ed
  $s$fOrd[] :: GHC.Classes.Ord [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Types.Double]
                  Main.$s$fOrd[]_$dEq
                  (GHC.Classes.$fOrd[]_$ccompare
                     @ GHC.Types.Double
                     Main.$s$fOrd[]_$dEq
                     GHC.Classes.$fOrdDouble)
                  Main.$s$fOrd[]6
                  Main.$s$fOrd[]5
                  Main.$s$fOrd[]4
                  Main.$s$fOrd[]3
                  Main.$s$fOrd[]2
                  Main.$s$fOrd[]1 -}
3cd78f6f33ff58afa5507ce94d996ff2
  $s$fOrd[]1 ::
    [GHC.Types.Double] -> [GHC.Types.Double] -> [GHC.Types.Double]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: [GHC.Types.Double] y :: [GHC.Types.Double] ->
                 case GHC.Classes.$w$ccompare14
                        @ GHC.Types.Double
                        GHC.Classes.$fOrdDouble
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
21fa1c94e255e6a50ee58466b1d61180
  $s$fOrd[]2 ::
    [GHC.Types.Double] -> [GHC.Types.Double] -> [GHC.Types.Double]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: [GHC.Types.Double] y :: [GHC.Types.Double] ->
                 case GHC.Classes.$w$ccompare14
                        @ GHC.Types.Double
                        GHC.Classes.$fOrdDouble
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
ce18af080822e8ba5b9cbd554aafe116
  $s$fOrd[]3 ::
    [GHC.Types.Double] -> [GHC.Types.Double] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: [GHC.Types.Double] y :: [GHC.Types.Double] ->
                 case GHC.Classes.$w$ccompare14
                        @ GHC.Types.Double
                        GHC.Classes.$fOrdDouble
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
dd651f294c5a80f8a762e3e0df75fa0f
  $s$fOrd[]4 ::
    [GHC.Types.Double] -> [GHC.Types.Double] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: [GHC.Types.Double] y :: [GHC.Types.Double] ->
                 case GHC.Classes.$w$ccompare14
                        @ GHC.Types.Double
                        GHC.Classes.$fOrdDouble
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
0945d7a2f3b0ba4f5fc7ba5fdd75e0d1
  $s$fOrd[]5 ::
    [GHC.Types.Double] -> [GHC.Types.Double] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: [GHC.Types.Double] y :: [GHC.Types.Double] ->
                 case GHC.Classes.$w$ccompare14
                        @ GHC.Types.Double
                        GHC.Classes.$fOrdDouble
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
f636a0ae174d490c10bb6be9c1019fa1
  $s$fOrd[]6 ::
    [GHC.Types.Double] -> [GHC.Types.Double] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: [GHC.Types.Double] y :: [GHC.Types.Double] ->
                 case GHC.Classes.$w$ccompare14
                        @ GHC.Types.Double
                        GHC.Classes.$fOrdDouble
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
e3b255ec359681ceca2d427268203463
  $s$fOrd[]_$dEq :: GHC.Classes.Eq [GHC.Types.Double]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fEq[] -}
c68e5260b3110744330ed4818cf0ca09
  $sfromListWith_$sfromListWithKey ::
    (Main.Point -> a -> a -> a)
    -> [(Main.Point, a)] -> Data.Map.Base.Map Main.Point a
  {- Arity: 2, Strictness: <L,C(C1(C1(U)))><S,1*U>,
     Unfolding: (\ @ a
                   f :: Main.Point -> a -> a -> a
                   xs :: [(Main.Point, a)] ->
                 letrec {
                   go10 :: Data.Map.Base.Map Main.Point a
                           -> [(Main.Point, a)] -> Data.Map.Base.Map Main.Point a
                     {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ z :: Data.Map.Base.Map Main.Point a ds :: [(Main.Point, a)] ->
                     case ds of wild {
                       [] -> z
                       : x xs1
                       -> case x of wild1 { (,) k1 x1 ->
                          case Main.$sfromListWith_$sgo10 @ a f k1 x1 z of z' { DEFAULT ->
                          go10 z' xs1 } } }
                 } in
                 go10 (Data.Map.Base.Tip @ Main.Point @ a) xs) -}
75bdf135c32545b350861d6a93e27545
  $sfromListWith_$sgo10 ::
    (Main.Point -> a1 -> a1 -> a1)
    -> Main.Point
    -> a1
    -> Data.Map.Base.Map Main.Point a1
    -> Data.Map.Base.Map Main.Point a1
  {- Arity: 4, Strictness: <L,1*C1(C1(C1(U)))><S,1*U><L,U><S,1*U> -}
2b2bdb6430cb22dbd2f4b139bb4375cd
  $sinsert_go10 ::
    GHC.Classes.Ord k1 =>
    k1 -> a1 -> Data.Map.Base.Map k1 a1 -> Data.Map.Base.Map k1 a1
  {- Arity: 4,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U><L,U><S,1*U> -}
6cfa8edba99e1998a32ed82c09a9db86
  $wgo ::
    [GHC.Types.Double]
    -> [GHC.Types.Double] -> GHC.Prim.Double# -> GHC.Prim.Double#
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U><L,U>,
     Inline: [0] -}
620cde51b495300abd548278478f90fe
  type Point = [GHC.Types.Double]
7c1d336be499fe1ddd7dced4de9f1c3c
  assign ::
    [Main.Point]
    -> [Main.Point] -> Data.Map.Base.Map Main.Point [Main.Point]
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ centroids :: [Main.Point] points :: [Main.Point] ->
                 letrec {
                   go1 :: [Main.Point] -> [(Main.Point, [Main.Point])]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [Main.Point] ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ (Main.Point, [Main.Point])
                       : y ys
                       -> GHC.Types.:
                            @ (Main.Point, [Main.Point])
                            (letrec {
                               go2 :: [Main.Point] -> Main.Point
                                 {- Arity: 1, Strictness: <S,1*U> -}
                               = \ ds1 :: [Main.Point] ->
                                 case ds1 of wild1 {
                                   [] -> Main.assign2
                                   : x ds2
                                   -> case ds2 of wild2 {
                                        [] -> x
                                        : ipv ipv1
                                        -> case Main.$wgo y x 0.0 of ww { DEFAULT ->
                                           let {
                                             ww1 :: GHC.Prim.Double# = GHC.Prim.sqrtDouble# ww
                                           } in
                                           let {
                                             y1 :: Main.Point = go2 wild2
                                           } in
                                           case Main.$wgo y y1 0.0 of ww2 { DEFAULT ->
                                           let {
                                             ww3 :: GHC.Prim.Double# = GHC.Prim.sqrtDouble# ww2
                                           } in
                                           case GHC.Prim.tagToEnum#
                                                  @ GHC.Types.Bool
                                                  (GHC.Prim.<## ww1 ww3) of wild3 {
                                             GHC.Types.False
                                             -> case GHC.Prim.tagToEnum#
                                                       @ GHC.Types.Bool
                                                       (GHC.Prim.==## ww1 ww3) of wild4 {
                                                  GHC.Types.False -> y1 GHC.Types.True -> x }
                                             GHC.Types.True -> x } } } } }
                             } in
                             go2 centroids,
                             GHC.Types.: @ Main.Point y (GHC.Types.[] @ Main.Point))
                            (go1 ys) }
                 } in
                 Main.$sfromListWith_$sfromListWithKey
                   @ [Main.Point]
                   Main.assign1
                   (go1 points)) -}
61e3af7a2de045ee9b2e17ff85a05974
  assign1 ::
    Main.Point -> [Main.Point] -> [Main.Point] -> [[GHC.Types.Double]]
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (\ ds :: Main.Point
                   x :: [Main.Point][OneShot]
                   y :: [Main.Point][OneShot] ->
                 GHC.Base.++ @ [GHC.Types.Double] x y) -}
717aac7dce94e8a26875fe58cf176294
  assign2 :: Main.Point
  {- Strictness: b -}
03538eab95684724f92d7f6b559966c4
  dist :: Main.Point -> Main.Point -> GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Main.Point w1 :: Main.Point ->
                 case Main.$wgo w w1 0.0 of ww { DEFAULT ->
                 GHC.Types.D# (GHC.Prim.sqrtDouble# ww) }) -}
14f09708c913c5effe1bc51e366c7f1e
  kmeans :: [Main.Point] -> [Main.Point] -> [Main.Point]
  {- Arity: 2, Strictness: <S,U><L,U> -}
2b695dfb6fd60d508ea11f88aec6462f
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
a95ca89d647885c9ae729a1cd92b3c3d
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True
                   eta) -}
fb8a164a9ada2241985c54dde6e9cc65
  main10 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.main13
                   Main.main11) -}
5f36bf1f72a99dccaf741b0d755fe7bf
  main11 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.main12
                   (GHC.Types.[] @ GHC.Types.Double)) -}
5ec79bdd76c652db3a6e749bfdc9253f
  main12 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 7.0) -}
9ea7d9a912bc16898651ad72731afa3d
  main13 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 8.0) -}
5bc526c40ddbaa1044680fea30b5fffc
  main14 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.main17
                   Main.main15) -}
fe323f65d6d6ad3dca97ac2ecc2926bd
  main15 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.main16
                   (GHC.Types.[] @ GHC.Types.Double)) -}
f4fa03c34ce19e6a9a778f90c4898801
  main16 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 6.0) -}
fdc4aa959edfad0dfe4baa612875c5f5
  main17 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 9.0) -}
66ad2f9309dd2a010d03b08516742bc7
  main18 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.main12
                   Main.main19) -}
c0e3b95f4324010c6a9a8c748c0ed02f
  main19 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.main20
                   (GHC.Types.[] @ GHC.Types.Double)) -}
033e58425752b974a76fd49a340840e7
  main2 :: GHC.Base.String
  {- Unfolding: (GHC.Show.showList__
                   @ [GHC.Types.Double]
                   GHC.Float.$fShowDouble_$cshowList
                   Main.main3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f843dcdba68853e42262fc98349557eb
  main20 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 5.0) -}
3c939fd9dcbd073bdb96612fdee82334
  main21 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.main23
                   Main.main22) -}
bc479506f06ff2a5df6b3f1091417102
  main22 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.main23
                   (GHC.Types.[] @ GHC.Types.Double)) -}
ef205973fd2f81a7c52cfce8851fa427
  main23 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 1.0) -}
bae467d4427c98509999675c8046d8fd
  main24 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.main25
                   Main.main22) -}
310535633d7d6145836e043e04ac0ce5
  main25 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 0.0) -}
c25d73676240041ceb48b7d9d1272486
  main26 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.main23
                   Main.main27) -}
fd0b584155b1cb4c1af7224e111bde52
  main27 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.main25
                   (GHC.Types.[] @ GHC.Types.Double)) -}
fc0b9ab54dad14aa3eba68abfcdd5fb6
  main28 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.main25
                   Main.main27) -}
4d4180bdba567ddb98e138ce08a1c3c7
  main29 :: [[GHC.Types.Double]]
  {- Unfolding: (GHC.List.$wunsafeTake
                   @ [GHC.Types.Double]
                   2
                   Main.main_points) -}
fb76c4b280e96353dcaae621511da783
  main3 :: [Main.Point]
  {- Unfolding: (Main.kmeans Main.main29 Main.main_points) -}
f0fc9c563de8b9fb7b59313c319641c2
  main30 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
29b62f8d3bfbb45b80f4514b0c181154
  main4 :: [[GHC.Types.Double]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Double]
                   Main.main26
                   Main.main5) -}
a3b7f7c689637e50751fbe577f29f6e6
  main5 :: [[GHC.Types.Double]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Double]
                   Main.main24
                   Main.main6) -}
c93c252f117aacef6d7d957218e95d4a
  main6 :: [[GHC.Types.Double]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Double]
                   Main.main21
                   Main.main7) -}
4bd031e43be22bb78638c54d45070c3f
  main7 :: [[GHC.Types.Double]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Double]
                   Main.main18
                   Main.main8) -}
9fb74b46270baf734f0b69440db5bdce
  main8 :: [[GHC.Types.Double]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Double]
                   Main.main14
                   Main.main9) -}
fe0168fa802cd4082e3aa86f04554853
  main9 :: [[GHC.Types.Double]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Double]
                   Main.main10
                   (GHC.Types.[] @ [GHC.Types.Double])) -}
b4244d0c70a0d088d7c3952eb04fc32b
  main_points :: [[GHC.Types.Double]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Double]
                   Main.main28
                   Main.main4) -}
0f9f4283b3605ce3f7446f90584b99e4
  relocate ::
    Data.Map.Base.Map Main.Point [Main.Point]
    -> Data.Map.Base.Map Main.Point [Main.Point]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ centroidsMap :: Data.Map.Base.Map
                                     Main.Point [Main.Point] ->
                 Main.relocate_go10
                   (Data.Map.Base.Tip @ Main.Point @ [Main.Point])
                   centroidsMap) -}
6e02351ccf78fde95c664b2956b69eec
  relocate_go10 ::
    Data.Map.Base.Map Main.Point [Main.Point]
    -> Data.Map.Base.Map Main.Point [[GHC.Types.Double]]
    -> Data.Map.Base.Map Main.Point [Main.Point]
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
"SPEC/Main $fEq[] @ Double" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                      GHC.Types.Double
  GHC.Classes.$fEq[] @ GHC.Types.Double $dEq = Main.$s$fEq[]
"SPEC/Main $fEq[]_$c/= @ Double" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                           GHC.Types.Double
  GHC.Classes.$fEq[]_$c/= @ GHC.Types.Double $dEq
  = Main.$s$fEq[]_$s$fEq[]_$c/=
"SPEC/Main $fOrd[] @ Double" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                       [GHC.Types.Double]
                                             $dOrd :: GHC.Classes.Ord GHC.Types.Double
  GHC.Classes.$fOrd[] @ GHC.Types.Double $dEq $dOrd = Main.$s$fOrd[]
"SPEC/Main fromListWithKey @ Point _" [ALWAYS] forall @ a
                                                      $dOrd :: GHC.Classes.Ord Main.Point
  Data.Map.Base.fromListWithKey @ [GHC.Types.Double] @ a $dOrd
  = Main.$sfromListWith_$sfromListWithKey @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

